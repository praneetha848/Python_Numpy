Libraryies
1. Statsmodel: Estimate statistical models and perform tests. (Data Engineer use this)
2.Scikit-image: Collection of algorithms for image processing
3.Scikit: Simple and efficient tools for machine learning in python
4.Pandas: Data analysis and manipulation.
5.matplotlib: Plotting library for 2D graphs and visualizations.
6. Use np.array to create numpy array


1.How to create empty array without intalizing the values
 
import numpy as np
empty_array=np.empty((2,3))
empty_array

O/P:

array([[0., 0., 0.],
       [0., 0., 0.]])

2.How to print  only zeros.

import numpy as np
zeros_array=np.zeros((2,3))
zeros_array

O/P:
array([[0., 0., 0.],
       [0., 0., 0.]])

3.How to print  only ones.

import numpy as np
ones_array=np.ones((2,3))
ones_array

O/P:
array([[1., 1., 1.],
       [1., 1., 1.]])




4.How to create square matrices

import numpy as np
array_eye=np.eye((3))
array_eye

O/P:

array([[1., 0., 0.],
       [0., 1., 0.],
       [0., 0., 1.]])

5. It create step values of array
How to create the array only even numbers.

array_arange=np.arange(2,10,2)
Array_arange

O/P:
array([2, 4, 6, 8])

6.How to get float values.

array_float_arange=np.arange(2,4,0.4)
array_float_arange
O/P:
array([2. , 2.4, 2.8, 3.2, 3.6])

7.How to create 2 dimensional array

array_2d=np.array([[1,2,3],[4,5,6]])
array_2d

O/P:
array([[1, 2, 3],
       [4, 5, 6]])

8.First create the array and then shape

array_nd=np.arange(6).reshape(3,2)
Array_nd

O/P:
array([[0, 1],
       [2, 3],
       [4, 5]])

9.How to create same array which is already existed fill with ones.

array_ones=np.ones_like(array_nd)
array_ones

O/P:

array([[1, 1],
       [1, 1],
       [1, 1]])

10.How to create one dimenstional array?
a=np.arange(6)
a

O/P:
array([0, 1, 2, 3, 4, 5])

11.How to create two dimenstional array?

array_2d= np.arange(12).reshape(4,3)
array_2d

O/P:
array([[ 0,  1,  2],
       [ 3,  4,  5],
       [ 6,  7,  8],
       [ 9, 10, 11]])


12.How to create three dimenstional array?

array_2d= np.arange(12).reshape(2,3,2)
array_2d

O/P:
array([[[ 0,  1],
        [ 2,  3],
        [ 4,  5]],

       [[ 6,  7],
        [ 8,  9],
        [10, 11]]])

13.

Formats the way the arrays are printed to screen- all arrays here on it this 
notebook will use these options.

np.set_printoptions(threshold=np.nan)
print(np.arange(10000).reshape(100,100))

Basic Operations
14.How to add two arrays?

import numpy as np
a=np.array([10,10,10])
b=np.array([2,3,4])
a+b

O/P:

array([12, 13, 14])

15.How to add two arrays?

a=np.array([10,10,10])
b=np.array([2,3,4])
A-b

O/P:

array([8, 7, 6])

16.How to multiply two arrays?

a=np.array([10,10,10])
b=np.array([2,3,4])
A*b




O/P:

array([20, 30, 40])

17.
You can apply division(/), %.
You can apply >,<,<=,=> also you will get true or false.

18. How to multiply 2 arrays
a=np.array([[1,1],[0,1]])
b=np.array([[2,1],[1,0]])
print('a:\n',a)
print('b:\n',b)
a*b

O/P:
array([[2, 1],
       [0, 0]])

18. A+b

O/P:
array([[3, 2],
       [1, 1]])

19.How to multiply with specific number
a=np.array([[1,1],[0,1]])
a*3

O/P:

array([[3, 3],
       [0, 3]])

20. How to find the sum ,min, max of array?
a=np.array([1,2,3])
a.sum()

O/P: 6

a=np.array([1,2,3])
a.min()

O/P: 1

a=np.array([1,2,3])
a.max()

O/P: 6


21.How to get sum, max, min for n dimenstional array 
Here we have to use sum(axis=0),min(axis=0),max(axis=0)

array_2d= np.arange(12).reshape(2,3,2)
array_2d.sum(axis=0)

O/P:

array([[ 6,  8],
       [10, 12],
       [14, 16]])


Indexing and slicing of arrays.

1.It used for accessing the subset of arrays.
2.If we using the positive number in the index then we will get results from left to right.
3.If we using the negative number in the index then we will get results from right to left 

22.How to get particular value using index number?

a=np.arange(11)**2
a
O/P:
array([  0,   1,   4,   9,  16,  25,  36,  49,  64,  81, 100], dtype=int32)


23.a=np.arange(11)**2
a[3]
O/P: 9

24.a=np.arange(11)**2
a[-3]
O/P: 64

25.a=np.arange(11)**2
A[2:-6]

O/P:

array([ 4,  9, 16], dtype=int32)

26.How to reverse the array
a=np.arange(11)**2
O/P:

array([100,  64,  36,  16,   4,   0], dtype=int32)

27.Create an array with different types of data types?

a=np.array([['aa','bb','cc'],[0,0,0],[9,9,9]])
A

O/P:
array([['aa', 'bb', 'cc'],
       ['0', '0', '0'],
       ['9', '9', '9']], dtype='<U2')

28.How to access only first row?
a=np.array([['aa','bb','cc'],[0,0,0],[9,9,9]])
a[0]

O/P:

array(['aa', 'bb', 'cc'], dtype='<U2')

29.How to access only first coloumn and all row?

a=np.array([['aa','bb','cc'],[0,0,0],[9,9,9]])
A[:,0]
O/P:
array(['aa', '0', '9'], dtype='<U2')



Iterating Over Arrays

30.How to iterate the array in numpy?

a=np.arange(11)**2
a
for i in a:
    print(i**(1/2))

O/P:

0.0
1.0
2.0
3.0
4.0
5.0
6.0
7.0
8.0
9.0
10.0

31. HGow to print every element in the array individually 
Using flatten function.

a=np.array([['aa','bb','cc'],
            [0,0,0],
            [9,9,9]])

for i in a.flatten():
    print(i)

O/P:

aa
bb
cc
0
0
0
9
9
9

32. How to print order according to column like first column elements first and 2nd column elements like 2nd.

a=np.array([['aa','bb','cc'],
            [0,0,0],
            [9,9,9]])

for i in a.flatten(order='F'):
    print(i)

O/P:

aa
0
9
bb
0
9
cc
0
9

33.How to print row wise order means row by row?
x=np.arange(12).reshape(3,4)
for i in np.nditer(x):
    print(i)

O/P:
0
1
2
3
4
5
6
7
8
9
10
11


34.How to print every column as one dimensional array?

x=np.arange(12).reshape(3,4)
for i in np.nditer(x,order='F',flags=['external_loop']):
    print(i)


O/P:

[0 4 8]
[1 5 9]
[ 2  6 10]
[ 3  7 11]


Reshaping Array

35. How to print two dimensional array into one dimensional array?

Use ravel()
a=np.array([['as','bs','cs'],['zx','cx','vx']])
a.ravel()

O/P:

array(['as', 'bs', 'cs', 'zx', 'cx', 'vx'], dtype='<U2')

36.How to transpose the matrix?

a=np.array([['as','bs','cs'],['zx','cx','vx']])
a.T

O/P:
array([['as', 'zx'],
       ['bs', 'cx'],
       ['cs', 'vx']], dtype='<U2')

37.How to transpose and ravel the matrix?
a=np.array([['as','bs','cs'],['zx','cx','vx']])
a.T.ravel()

38.How to reshape the numpy array?
a=np.array([['as','bs','cs'],['zx','cx','vx']])
a.reshape(3,2)

O/P:
array([['as', 'bs'],
       ['cs', 'zx'],
       ['cx', 'vx']], dtype='<U2')

39.How to reshape the array if we don’t know about the rows and we know about columns?
Here -1  means if we are giving the negative number means,we don’t the row how many have to create and it will create according to the elements are present.

a=np.array([['as','bs','cs'],['zx','cx','vx']])
a.reshape(-1,3)

O/P:
array([['as', 'bs', 'cs'],
       ['zx', 'cx', 'vx']], dtype='<U2')

40.How to reshape the array if we don’t know about the columns and we know about row?

a=np.array([['as','bs','cs'],['zx','cx','vx']])
a.reshape(3,-1)

O/P:

array([['as', 'bs'],
       ['cs', 'zx'],
       ['cx', 'vx']], dtype='<U2')



Splitting array

41.How to split the array?
You should more specify of array it depends on arange()-> number

x=np.arange(9)
np.split(x,3)

O/P:
[array([0, 1, 2]), array([3, 4, 5]), array([6, 7, 8])]


42.How to split the array into two horizontal array?

x=np.array([['as','bs','cs'],['zx','cx','vx']])
p1,p2,p3 = np.hsplit(x,3)
print(p1)

O/P:
[['as']
 ['zx']]

43.How to split the array into two vertically array?

x=np.array([['as','bs','cs'],['zx','cx','vx']])
p1,p2 = np.vsplit(x,2)
print(p1)

O/P:
[['as' 'bs' 'cs']]

Image Manipulation

We have three values to represent the value.
0,0,255
0,255,0
255,0,0

Shallow Copies using View.

Coping the original array is called Shallow copies

The id's of the original array and id's of copied array are different.


44.import numpy as np
fruits=np.array(["Apple","Mango","Grapes","pineapple"])
basket_1=fruits.view()
basket_2=fruits.view()
print(basket_1)
print(basket_2)

O/P:

['Apple' 'Mango' 'Grapes' 'pineapple']
['Apple' 'Mango' 'Grapes' 'pineapple']

45.
basket_2[0]= "strawberry"
print(basket_1)
print(basket_2)


Making deep copies of array
It complete create the new array from the existing array
fruits=np.array(["Apple","Mango","Grapes","pineapple"])

46.import numpy as np
fruits=np.array(["Apple","Mango","Grapes","pineapple"])
basket=fruits.copy()
basket

O/P:
array(['Apple', 'Mango', 'Grapes', 'pineapple'], dtype='<U9')

if we changed the basket array . it will never effect the fruits array




















